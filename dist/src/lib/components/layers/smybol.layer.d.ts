import { PropType } from 'vue';
declare const _default: import("vue").DefineComponent<{
    layout: PropType<{
        "symbol-placement"?: import("maplibre-gl").PropertyValueSpecification<"line" | "point" | "line-center"> | undefined;
        "symbol-spacing"?: import("maplibre-gl").PropertyValueSpecification<number> | undefined;
        "symbol-avoid-edges"?: import("maplibre-gl").PropertyValueSpecification<boolean> | undefined;
        "symbol-sort-key"?: import("maplibre-gl").DataDrivenPropertyValueSpecification<number> | undefined;
        "symbol-z-order"?: import("maplibre-gl").PropertyValueSpecification<"auto" | "source" | "viewport-y"> | undefined;
        "icon-allow-overlap"?: import("maplibre-gl").PropertyValueSpecification<boolean> | undefined;
        "icon-overlap"?: import("maplibre-gl").PropertyValueSpecification<"never" | "always" | "cooperative"> | undefined;
        "icon-ignore-placement"?: import("maplibre-gl").PropertyValueSpecification<boolean> | undefined;
        "icon-optional"?: import("maplibre-gl").PropertyValueSpecification<boolean> | undefined;
        "icon-rotation-alignment"?: import("maplibre-gl").PropertyValueSpecification<"map" | "auto" | "viewport"> | undefined;
        "icon-size"?: import("maplibre-gl").DataDrivenPropertyValueSpecification<number> | undefined;
        "icon-text-fit"?: import("maplibre-gl").PropertyValueSpecification<"width" | "height" | "none" | "both"> | undefined;
        "icon-text-fit-padding"?: import("maplibre-gl").PropertyValueSpecification<[number, number, number, number]> | undefined;
        "icon-image"?: import("maplibre-gl").DataDrivenPropertyValueSpecification<string> | undefined;
        "icon-rotate"?: import("maplibre-gl").DataDrivenPropertyValueSpecification<number> | undefined;
        "icon-padding"?: import("maplibre-gl").DataDrivenPropertyValueSpecification<import("maplibre-gl").PaddingSpecification> | undefined;
        "icon-keep-upright"?: import("maplibre-gl").PropertyValueSpecification<boolean> | undefined;
        "icon-offset"?: import("maplibre-gl").DataDrivenPropertyValueSpecification<[number, number]> | undefined;
        "icon-anchor"?: import("maplibre-gl").DataDrivenPropertyValueSpecification<"center" | "top-left" | "top-right" | "bottom-left" | "bottom-right" | "top" | "bottom" | "left" | "right"> | undefined;
        "icon-pitch-alignment"?: import("maplibre-gl").PropertyValueSpecification<"map" | "auto" | "viewport"> | undefined;
        "text-pitch-alignment"?: import("maplibre-gl").PropertyValueSpecification<"map" | "auto" | "viewport"> | undefined;
        "text-rotation-alignment"?: import("maplibre-gl").PropertyValueSpecification<"map" | "auto" | "viewport" | "viewport-glyph"> | undefined;
        "text-field"?: import("maplibre-gl").DataDrivenPropertyValueSpecification<string> | undefined;
        "text-font"?: import("maplibre-gl").DataDrivenPropertyValueSpecification<string[]> | undefined;
        "text-size"?: import("maplibre-gl").DataDrivenPropertyValueSpecification<number> | undefined;
        "text-max-width"?: import("maplibre-gl").DataDrivenPropertyValueSpecification<number> | undefined;
        "text-line-height"?: import("maplibre-gl").PropertyValueSpecification<number> | undefined;
        "text-letter-spacing"?: import("maplibre-gl").DataDrivenPropertyValueSpecification<number> | undefined;
        "text-justify"?: import("maplibre-gl").DataDrivenPropertyValueSpecification<"center" | "auto" | "left" | "right"> | undefined;
        "text-radial-offset"?: import("maplibre-gl").DataDrivenPropertyValueSpecification<number> | undefined;
        "text-variable-anchor"?: import("maplibre-gl").PropertyValueSpecification<("center" | "top-left" | "top-right" | "bottom-left" | "bottom-right" | "top" | "bottom" | "left" | "right")[]> | undefined;
        "text-variable-anchor-offset"?: import("maplibre-gl").DataDrivenPropertyValueSpecification<import("maplibre-gl").VariableAnchorOffsetCollectionSpecification> | undefined;
        "text-anchor"?: import("maplibre-gl").DataDrivenPropertyValueSpecification<"center" | "top-left" | "top-right" | "bottom-left" | "bottom-right" | "top" | "bottom" | "left" | "right"> | undefined;
        "text-max-angle"?: import("maplibre-gl").PropertyValueSpecification<number> | undefined;
        "text-writing-mode"?: import("maplibre-gl").PropertyValueSpecification<("horizontal" | "vertical")[]> | undefined;
        "text-rotate"?: import("maplibre-gl").DataDrivenPropertyValueSpecification<number> | undefined;
        "text-padding"?: import("maplibre-gl").PropertyValueSpecification<number> | undefined;
        "text-keep-upright"?: import("maplibre-gl").PropertyValueSpecification<boolean> | undefined;
        "text-transform"?: import("maplibre-gl").DataDrivenPropertyValueSpecification<"none" | "uppercase" | "lowercase"> | undefined;
        "text-offset"?: import("maplibre-gl").DataDrivenPropertyValueSpecification<[number, number]> | undefined;
        "text-allow-overlap"?: import("maplibre-gl").PropertyValueSpecification<boolean> | undefined;
        "text-overlap"?: import("maplibre-gl").PropertyValueSpecification<"never" | "always" | "cooperative"> | undefined;
        "text-ignore-placement"?: import("maplibre-gl").PropertyValueSpecification<boolean> | undefined;
        "text-optional"?: import("maplibre-gl").PropertyValueSpecification<boolean> | undefined;
        visibility?: "visible" | "none" | undefined;
    } | undefined>;
    paint: PropType<{
        "icon-opacity"?: import("maplibre-gl").DataDrivenPropertyValueSpecification<number> | undefined;
        "icon-color"?: import("maplibre-gl").DataDrivenPropertyValueSpecification<string> | undefined;
        "icon-halo-color"?: import("maplibre-gl").DataDrivenPropertyValueSpecification<string> | undefined;
        "icon-halo-width"?: import("maplibre-gl").DataDrivenPropertyValueSpecification<number> | undefined;
        "icon-halo-blur"?: import("maplibre-gl").DataDrivenPropertyValueSpecification<number> | undefined;
        "icon-translate"?: import("maplibre-gl").PropertyValueSpecification<[number, number]> | undefined;
        "icon-translate-anchor"?: import("maplibre-gl").PropertyValueSpecification<"map" | "viewport"> | undefined;
        "text-opacity"?: import("maplibre-gl").DataDrivenPropertyValueSpecification<number> | undefined;
        "text-color"?: import("maplibre-gl").DataDrivenPropertyValueSpecification<string> | undefined;
        "text-halo-color"?: import("maplibre-gl").DataDrivenPropertyValueSpecification<string> | undefined;
        "text-halo-width"?: import("maplibre-gl").DataDrivenPropertyValueSpecification<number> | undefined;
        "text-halo-blur"?: import("maplibre-gl").DataDrivenPropertyValueSpecification<number> | undefined;
        "text-translate"?: import("maplibre-gl").PropertyValueSpecification<[number, number]> | undefined;
        "text-translate-anchor"?: import("maplibre-gl").PropertyValueSpecification<"map" | "viewport"> | undefined;
    } | undefined>;
    layerId: {
        type: PropType<string>;
        required: boolean;
    };
    source: PropType<string | import("maplibre-gl").Source>;
    metadata: PropType<any>;
    ref: PropType<string>;
    sourceLayer: PropType<string>;
    minzoom: PropType<number>;
    maxzoom: PropType<number>;
    interactive: PropType<boolean>;
    filter: PropType<any[]>;
    before: PropType<string>;
}, (() => import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
    [key: string]: any;
}>) | undefined, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, string[], string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    layout: PropType<{
        "symbol-placement"?: import("maplibre-gl").PropertyValueSpecification<"line" | "point" | "line-center"> | undefined;
        "symbol-spacing"?: import("maplibre-gl").PropertyValueSpecification<number> | undefined;
        "symbol-avoid-edges"?: import("maplibre-gl").PropertyValueSpecification<boolean> | undefined;
        "symbol-sort-key"?: import("maplibre-gl").DataDrivenPropertyValueSpecification<number> | undefined;
        "symbol-z-order"?: import("maplibre-gl").PropertyValueSpecification<"auto" | "source" | "viewport-y"> | undefined;
        "icon-allow-overlap"?: import("maplibre-gl").PropertyValueSpecification<boolean> | undefined;
        "icon-overlap"?: import("maplibre-gl").PropertyValueSpecification<"never" | "always" | "cooperative"> | undefined;
        "icon-ignore-placement"?: import("maplibre-gl").PropertyValueSpecification<boolean> | undefined;
        "icon-optional"?: import("maplibre-gl").PropertyValueSpecification<boolean> | undefined;
        "icon-rotation-alignment"?: import("maplibre-gl").PropertyValueSpecification<"map" | "auto" | "viewport"> | undefined;
        "icon-size"?: import("maplibre-gl").DataDrivenPropertyValueSpecification<number> | undefined;
        "icon-text-fit"?: import("maplibre-gl").PropertyValueSpecification<"width" | "height" | "none" | "both"> | undefined;
        "icon-text-fit-padding"?: import("maplibre-gl").PropertyValueSpecification<[number, number, number, number]> | undefined;
        "icon-image"?: import("maplibre-gl").DataDrivenPropertyValueSpecification<string> | undefined;
        "icon-rotate"?: import("maplibre-gl").DataDrivenPropertyValueSpecification<number> | undefined;
        "icon-padding"?: import("maplibre-gl").DataDrivenPropertyValueSpecification<import("maplibre-gl").PaddingSpecification> | undefined;
        "icon-keep-upright"?: import("maplibre-gl").PropertyValueSpecification<boolean> | undefined;
        "icon-offset"?: import("maplibre-gl").DataDrivenPropertyValueSpecification<[number, number]> | undefined;
        "icon-anchor"?: import("maplibre-gl").DataDrivenPropertyValueSpecification<"center" | "top-left" | "top-right" | "bottom-left" | "bottom-right" | "top" | "bottom" | "left" | "right"> | undefined;
        "icon-pitch-alignment"?: import("maplibre-gl").PropertyValueSpecification<"map" | "auto" | "viewport"> | undefined;
        "text-pitch-alignment"?: import("maplibre-gl").PropertyValueSpecification<"map" | "auto" | "viewport"> | undefined;
        "text-rotation-alignment"?: import("maplibre-gl").PropertyValueSpecification<"map" | "auto" | "viewport" | "viewport-glyph"> | undefined;
        "text-field"?: import("maplibre-gl").DataDrivenPropertyValueSpecification<string> | undefined;
        "text-font"?: import("maplibre-gl").DataDrivenPropertyValueSpecification<string[]> | undefined;
        "text-size"?: import("maplibre-gl").DataDrivenPropertyValueSpecification<number> | undefined;
        "text-max-width"?: import("maplibre-gl").DataDrivenPropertyValueSpecification<number> | undefined;
        "text-line-height"?: import("maplibre-gl").PropertyValueSpecification<number> | undefined;
        "text-letter-spacing"?: import("maplibre-gl").DataDrivenPropertyValueSpecification<number> | undefined;
        "text-justify"?: import("maplibre-gl").DataDrivenPropertyValueSpecification<"center" | "auto" | "left" | "right"> | undefined;
        "text-radial-offset"?: import("maplibre-gl").DataDrivenPropertyValueSpecification<number> | undefined;
        "text-variable-anchor"?: import("maplibre-gl").PropertyValueSpecification<("center" | "top-left" | "top-right" | "bottom-left" | "bottom-right" | "top" | "bottom" | "left" | "right")[]> | undefined;
        "text-variable-anchor-offset"?: import("maplibre-gl").DataDrivenPropertyValueSpecification<import("maplibre-gl").VariableAnchorOffsetCollectionSpecification> | undefined;
        "text-anchor"?: import("maplibre-gl").DataDrivenPropertyValueSpecification<"center" | "top-left" | "top-right" | "bottom-left" | "bottom-right" | "top" | "bottom" | "left" | "right"> | undefined;
        "text-max-angle"?: import("maplibre-gl").PropertyValueSpecification<number> | undefined;
        "text-writing-mode"?: import("maplibre-gl").PropertyValueSpecification<("horizontal" | "vertical")[]> | undefined;
        "text-rotate"?: import("maplibre-gl").DataDrivenPropertyValueSpecification<number> | undefined;
        "text-padding"?: import("maplibre-gl").PropertyValueSpecification<number> | undefined;
        "text-keep-upright"?: import("maplibre-gl").PropertyValueSpecification<boolean> | undefined;
        "text-transform"?: import("maplibre-gl").DataDrivenPropertyValueSpecification<"none" | "uppercase" | "lowercase"> | undefined;
        "text-offset"?: import("maplibre-gl").DataDrivenPropertyValueSpecification<[number, number]> | undefined;
        "text-allow-overlap"?: import("maplibre-gl").PropertyValueSpecification<boolean> | undefined;
        "text-overlap"?: import("maplibre-gl").PropertyValueSpecification<"never" | "always" | "cooperative"> | undefined;
        "text-ignore-placement"?: import("maplibre-gl").PropertyValueSpecification<boolean> | undefined;
        "text-optional"?: import("maplibre-gl").PropertyValueSpecification<boolean> | undefined;
        visibility?: "visible" | "none" | undefined;
    } | undefined>;
    paint: PropType<{
        "icon-opacity"?: import("maplibre-gl").DataDrivenPropertyValueSpecification<number> | undefined;
        "icon-color"?: import("maplibre-gl").DataDrivenPropertyValueSpecification<string> | undefined;
        "icon-halo-color"?: import("maplibre-gl").DataDrivenPropertyValueSpecification<string> | undefined;
        "icon-halo-width"?: import("maplibre-gl").DataDrivenPropertyValueSpecification<number> | undefined;
        "icon-halo-blur"?: import("maplibre-gl").DataDrivenPropertyValueSpecification<number> | undefined;
        "icon-translate"?: import("maplibre-gl").PropertyValueSpecification<[number, number]> | undefined;
        "icon-translate-anchor"?: import("maplibre-gl").PropertyValueSpecification<"map" | "viewport"> | undefined;
        "text-opacity"?: import("maplibre-gl").DataDrivenPropertyValueSpecification<number> | undefined;
        "text-color"?: import("maplibre-gl").DataDrivenPropertyValueSpecification<string> | undefined;
        "text-halo-color"?: import("maplibre-gl").DataDrivenPropertyValueSpecification<string> | undefined;
        "text-halo-width"?: import("maplibre-gl").DataDrivenPropertyValueSpecification<number> | undefined;
        "text-halo-blur"?: import("maplibre-gl").DataDrivenPropertyValueSpecification<number> | undefined;
        "text-translate"?: import("maplibre-gl").PropertyValueSpecification<[number, number]> | undefined;
        "text-translate-anchor"?: import("maplibre-gl").PropertyValueSpecification<"map" | "viewport"> | undefined;
    } | undefined>;
    layerId: {
        type: PropType<string>;
        required: boolean;
    };
    source: PropType<string | import("maplibre-gl").Source>;
    metadata: PropType<any>;
    ref: PropType<string>;
    sourceLayer: PropType<string>;
    minzoom: PropType<number>;
    maxzoom: PropType<number>;
    interactive: PropType<boolean>;
    filter: PropType<any[]>;
    before: PropType<string>;
}>> & {
    [x: `on${Capitalize<string>}`]: ((...args: any[]) => any) | undefined;
}, {}, {}>;
export default _default;
